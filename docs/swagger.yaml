basePath: /api/v1
definitions:
  model.ApiResponse:
    properties:
      message:
        type: string
    type: object
  model.Article:
    properties:
      content:
        type: string
      id:
        type: integer
      title:
        type: string
      writer:
        type: string
    type: object
  model.GetArticle:
    properties:
      content:
        type: string
      date:
        type: string
      id:
        type: integer
      title:
        type: string
      writer:
        type: string
    type: object
  model.GetArticleList:
    properties:
      date:
        type: string
      id:
        type: integer
      title:
        type: string
      writer:
        type: string
    type: object
  model.GetArticleListResponse:
    properties:
      articleList:
        items:
          $ref: '#/definitions/model.GetArticleList'
        type: array
      current:
        type: integer
      message:
        type: string
      totalPage:
        type: integer
    type: object
  model.GetArticleResponse:
    properties:
      article:
        $ref: '#/definitions/model.GetArticle'
      message:
        type: string
    type: object
  model.PostLoginRequest:
    properties:
      email:
        type: string
      pw:
        type: string
    type: object
  model.PostLoginResponse:
    properties:
      accessToken:
        type: string
      message:
        type: string
      refreshToken:
        type: string
    type: object
  model.User:
    properties:
      email:
        type: string
      pw:
        type: string
    type: object
host: 211.34.36.139:1323
info:
  contact:
    email: dia_changmin@naver.com
    name: API Support
  description: This is a Hwisaek's server.
  title: Hwisaek's server
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - application/json
      description: 레디스 테스트 API
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ApiResponse'
      summary: Redis Test API
  /articles:
    get:
      consumes:
      - application/json
      description: 게시글 목록 조회
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetArticleListResponse'
      summary: Get article list
    post:
      consumes:
      - application/json
      description: 게시글 작성
      parameters:
      - description: 게시글 ID
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: Object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ApiResponse'
      summary: Create article
  /articles/{id}:
    delete:
      consumes:
      - application/json
      description: 게시글 삭제
      parameters:
      - description: 게시글 ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ApiResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ApiResponse'
      summary: Delete article
    get:
      consumes:
      - application/json
      description: 게시글 조회
      parameters:
      - description: 게시글 ID
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetArticleResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ApiResponse'
      summary: Get article
    put:
      consumes:
      - application/json
      description: 게시글 수정
      parameters:
      - description: 게시글 ID
        in: path
        name: id
        required: true
        type: string
      - description: 게시글 내용
        in: body
        name: article
        required: true
        schema:
          $ref: '#/definitions/model.Article'
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ApiResponse'
      summary: Update article
  /login:
    post:
      consumes:
      - application/json
      description: 로그인
      parameters:
      - description: 로그인 정보
        in: body
        name: loginInfo
        required: true
        schema:
          $ref: '#/definitions/model.PostLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PostLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ApiResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ApiResponse'
      summary: Login
  /logout:
    get:
      consumes:
      - application/json
      description: 로그아웃
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ApiResponse'
      summary: Logout
  /signup:
    post:
      consumes:
      - application/json
      description: 회원가입
      parameters:
      - description: 회원가입 유저 정보
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ApiResponse'
      summary: Sign up
  /token/refresh:
    post:
      consumes:
      - application/json
      description: 토큰 재발급
      parameters:
      - description: AccessToken
        in: body
        name: accessToken
        required: true
        schema:
          type: string
      - description: RefreshToken
        in: body
        name: refreshToken
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PostLoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ApiResponse'
      summary: Refresh token
swagger: "2.0"
